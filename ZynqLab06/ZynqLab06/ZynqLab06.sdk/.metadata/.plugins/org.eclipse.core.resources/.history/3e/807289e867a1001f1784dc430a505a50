/*
 * main.c
 *
 *  Created on: 2024. 11. 11.
 *      Author: dlwns
 */

#include "stdio.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xscugic.h"
#include "myKEYPAD2.h"

#define KEYPAD_ST (volatile unsigned int *)(XPAR_MYKEYPAD2_0_S00_AXI_BASEADDR + 0)
#define KEYPAD_NUM (volatile unsigned int *)(XPAR_MYKEYPAD2_0_S00_AXI_BASEADDR + 4)
#define DEBOUNCE_DELAY 1000000  // Adjust this value as needed for debounce time

XGpio Gpio;
XScuGic INTCInst;

unsigned int prevKeyNum = 0xFF; // Initialize with an invalid key number for first run

/////////////////////////////////////////////////////
// MyKEYPAD Interrupt Handler with Enhanced Debounce
/////////////////////////////////////////////////////

void MyKEYPADISR(void *arg)
{
    unsigned int keyNumHw;
    unsigned int stableKeyNum = 0xFF;

    // Read keypad value
    keyNumHw = *KEYPAD_NUM & 0xFF;

    // Debounce check: Wait until the key state is stable
    for (volatile unsigned long long i = 0; i < DEBOUNCE_DELAY; i++) {
        stableKeyNum = *KEYPAD_NUM & 0xFF;
        if (stableKeyNum != keyNumHw) {
            // If the key state changes during debounce period, exit
            return;
        }
    }

    // If keyNum is stable and different from the previous key
    if (stableKeyNum != 0xFF && stableKeyNum != prevKeyNum) {
        XGpio_DiscreteWrite(&Gpio, 1, stableKeyNum);
        printf("MyKEYPADISR: KeyNum = %d\n", stableKeyNum);
        prevKeyNum = stableKeyNum;
    }

    // Key released: reset prevKeyNum to allow repeated detection
    if (stableKeyNum == 0xFF) {
        prevKeyNum = 0xFF;
    }
}

/////////////////////////////////////////////////////
// GIC-related interrupt configuration
/////////////////////////////////////////////////////

void InitGIC_Interrupt()
{
    XScuGic_Config *IntcConfig;

    IntcConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
    XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);

    // Set priority and trigger type
    XScuGic_SetPriorityTriggerType(&INTCInst, XPAR_FABRIC_MYKEYPAD2_0_IRQ_INTR, 0, 3);

    // Connect MyKEYPAD2 interrupt
    XScuGic_Connect(&INTCInst, XPAR_FABRIC_MYKEYPAD2_0_IRQ_INTR, (Xil_ExceptionHandler)MyKEYPADISR, (void *)&Gpio);
    XScuGic_Enable(&INTCInst, XPAR_FABRIC_MYKEYPAD2_0_IRQ_INTR);
}

/////////////////////////////////////////////////////
// ARM Cortex-related interrupt configuration
/////////////////////////////////////////////////////

void InitCortex_Interrupt()
{
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &INTCInst);
    Xil_ExceptionEnable();
}

/////////////////////////////////////////////////////
// MAIN FUNCTION
/////////////////////////////////////////////////////

int main()
{
    // Initialize GPIO
    XGpio_Initialize(&Gpio, XPAR_AXI_GPIO_0_DEVICE_ID);

    // Initialize GIC and Cortex interrupts
    InitGIC_Interrupt();
    InitCortex_Interrupt();

    while (1) {
        // Do nothing, wait for interrupts
    }

    return 0;
}
