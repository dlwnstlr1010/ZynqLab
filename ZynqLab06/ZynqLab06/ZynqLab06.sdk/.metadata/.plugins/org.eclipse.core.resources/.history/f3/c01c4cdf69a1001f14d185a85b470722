/*
 * main.c
 *
 *  Created on: 2024. 11. 11.
 *      Author: dlwns
 */

#include "stdio.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xscugic.h"
#include "myKEYPAD2.h"

#define KEYPAD_ST (volatile unsigned int *)(XPAR_MYKEYPAD2_0_S00_AXI_BASEADDR + 0)
#define KEYPAD_NUM (volatile unsigned int *)(XPAR_MYKEYPAD2_0_S00_AXI_BASEADDR + 4)
#define DEBOUNCE_DELAY 500000  // Adjust debounce time as needed

XGpio Gpio;
XScuGic INTCInst;

unsigned int prevKeyNum = 0xFF;     // Track last key number
volatile unsigned int debounceActive = 0;  // Flag to manage debounce
volatile unsigned int debounceCounter = 0; // Counter for debounce timing

/////////////////////////////////////////////////////
// MyKEYPAD Interrupt Handler with Improved Debounce Logic
/////////////////////////////////////////////////////

void MyKEYPADISR(void *arg)
{
    unsigned int keyNumHw;

    // Read the current keypad value
    keyNumHw = *KEYPAD_NUM & 0xFF;

    // Only process if debounce is not active
    if (!debounceActive) {
        // Check if a key is pressed (not 0xFF) and it's a new press or different key
        if (keyNumHw != 0xFF && keyNumHw != prevKeyNum) {
            XGpio_DiscreteWrite(&Gpio, 1, keyNumHw);
            printf("MyKEYPADISR: KeyNum = %d\n", keyNumHw);

            prevKeyNum = keyNumHw;       // Store current key as previous key
            debounceActive = 1;          // Activate debounce
            debounceCounter = DEBOUNCE_DELAY; // Initialize debounce counter
        }
        // If no key is pressed, reset previous key to allow repeated detection
        else if (keyNumHw == 0xFF) {
            prevKeyNum = 0xFF;           // Reset previous key to allow repeated key press
        }
    }

    // Apply debounce delay if active
    if (debounceActive) {
        if (debounceCounter > 0) {
            debounceCounter--;           // Decrease debounce counter
        } else {
            debounceActive = 0;          // Deactivate debounce when counter reaches 0
        }
    }
}

/////////////////////////////////////////////////////
// GIC-related interrupt configuration
/////////////////////////////////////////////////////

void InitGIC_Interrupt()
{
    XScuGic_Config *IntcConfig;

    IntcConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
    XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);

    // Set priority and trigger type
    XScuGic_SetPriorityTriggerType(&INTCInst, XPAR_FABRIC_MYKEYPAD2_0_IRQ_INTR, 0, 3);

    // Connect MyKEYPAD2 interrupt
    XScuGic_Connect(&INTCInst, XPAR_FABRIC_MYKEYPAD2_0_IRQ_INTR, (Xil_ExceptionHandler)MyKEYPADISR, (void *)&Gpio);
    XScuGic_Enable(&INTCInst, XPAR_FABRIC_MYKEYPAD2_0_IRQ_INTR);
}

/////////////////////////////////////////////////////
// ARM Cortex-related interrupt configuration
/////////////////////////////////////////////////////

void InitCortex_Interrupt()
{
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &INTCInst);
    Xil_ExceptionEnable();
}

/////////////////////////////////////////////////////
// MAIN FUNCTION
/////////////////////////////////////////////////////

int main()
{
    // Initialize GPIO
    XGpio_Initialize(&Gpio, XPAR_AXI_GPIO_0_DEVICE_ID);

    // Initialize GIC and Cortex interrupts
    InitGIC_Interrupt();
    InitCortex_Interrupt();

    while (1) {
        // Do nothing, wait for interrupts
    }

    return 0;
}
